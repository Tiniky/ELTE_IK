//AVL fa: fogalma, miértje, láncolt és szöveges ábrázolása, kulcs beszúrása

AVL fa = magasság szerint kiegyensúlyuzott biniáris keresőfa
magasság szerint kiegyensúlyozott bináris fa = minden csúcsa kiegyensúlyozott
a bin fa (*p) csúcsa kiegyensúlyozott = a csúcs (p->b) egyensúlyra |p->b|<=1
=> egyensúly definíció:
p->b = h(p->right)-h(p->left)

Tétel: Tetszőleges n csúcsú nemüres AVL fa h magasságára:
[log n] <= h <= 1,45 log n, azaz h eleme Theta log n
biz: 
- alsó és felső becslés h magasságú nemüres kiegyensúlyozott bin fára(KBF), n < 2^h+1 -> [log n] <= h
- meghatározzuk a h mélységű legkisebb KBF csúcsainak számát (fh) -> f0=1, f1=2, fh=1 + fh-1 + fh-2 (h>=2) <- Fibonacci fák
- tetszőleges h magasságú KBF n méretére n >= fh -> h<=1,45 log n
- az AVL fák magassága Theta log n -> MT(n) eleme Theta log n


- láncolt ábrázolás
- kiegyensúlyozatlan részfák kiegyensúlyozásához forgatást használunk
pl.
Balra forgatás: [α T (β R γ)] → [(α T β) R γ]
Jobbra forgatás: [(α L β) T γ] → [α L (β T γ)]

Beszúrás
bin keresőfánál insert(t,k)

transzformáció = kettős forgatás
h = h(α)
(1) L− esetén h(β) = h és h(γ) = h − 1 ⇒ az eredmény fában T◦ és R+
(2) L◦ esetén h(β) = h és h(γ) = h ⇒ az eredmény fában T◦ és R◦
(3) L+ esetén h(β) = h − 1 és h(γ) = h ⇒ az eredmény fában T− és R◦
=> mindhárom esetben h([α T β]) = h + 1 = h([γ R δ]), így L◦

beszúrás menete:
1. Megkeressük a kulcs helyét a fában
2. Ha a kulcs benne van a fában, STOP
3. Ha a kulcs helyén egy üres részfa található, beszúrunk egy új levélcsúcsot => a részfa eggyel magasabb lett
4. Ha a gyökércsúcsnál vagyunk, STOP
Else egyet fölfelé lépünk a keresőfában => a részfa eggyel magasabb lett <= ha a jobb részfa lett magasabb, hozzáadunk az egyensúlyhoz egyet, ha a bal, levonunk belőle egyet
5. Ha az aktuális csúcs egyensúlya 0 lett, akkor STOP
6. Ha az aktuális csúcs új egyensúlya 1 vagy -1 => a 4. ponttól folytatjuk
7. Ha az aktuális csúcs új egyensúlya 2 vagy -2: STOP

remMin
1. balra megyünk ameddig lehet
2. ha nincs tőle balra akkor ő a minimum, visszaadjuk
3. csúsztassuk fel a jobb részfáját ha van
4. egyensúlyozgassunk ha kell

Törlés
1) levél vagy egy gyerekes csúcs törlés
2) két gyerekes csúcs törlés

1 eset ugyanaz mint remMin
2 esetnél előbb kiemeljük a jobb oldali részfa minimumát, ez bekerül a törlendő elem helyére, ha kell egyensúlyozunk utána

Magassága
=> tetszőleges n csúcsú nemüres AVL fa h magassága
[log n] ≤ h ≤ 1, 45 log n
Biz: ez tetszőleges nem üres fára igaz
ha az i-edik szinten 2^i csúcs van akkor az i+1-edik szinten legfeljebb 2^i+1 csúcs lehet
[log n] <= log n < log 2^h+1 = h + 1 ==> [log n] <= h


//Általános fa
=> egy csúcsnak tetszőlegesen sok gyereke lehet
rendezett fa = lényeges a sorrend

- van gyökere
- nincs üres részfája
- bináris láncolt reprezentáció


//Egyszerű gráfok
=> G=(V,E) rendezett páros, ahol V a csúcsok hazlmaza és E az éleke, nincs hurokél vagy párhuzamosél

irányítatlan gráf = ha tetszőleges (u,v) eleme E élre (u,v) = (v,u)

irányított gráf = ha tetszőleges (u,v) eleme E élre (u,v) != (v,u) <= egymás fordítottja

út = a csúcsok sorozata, ahol i eleme 1..n (ui-1, ui) eleme E

kör = út aminek kezdő és végpontja azonos

egyszerű kör = csak a kezdő és végpontja

DAG(Diracted Acyclic Graph) = irányított körmentes gráf

irányított gráf irányítatlan megfelelője a G' = (V,E') amire E' = {(u,v) : (u,v) eleme E VAGY (v,u) eleme E}

irányítatlan és összefüggő = tetszőleges csúcsból bármelyik csúcsba vezet út
irányított és összefüggő = ha irányítatlan megfelelője összefüggő

szabad fa = irányítatlan, körmentes és összefüggő

u generátor csúcs ha létezik út tetszőleges v csúcsba => ha van generátor csúcsa akkor összefüggő

gyökeres fa = irányított és van generátor csúcsa és irányítatlan megfelelője körmentes

rész gráf = mindkettő vagy irányított vagy irányítatlan

diszjunkt = nincs közös csúcs

erdő = összefüggő komponensei fák, körmentes

Grafikus ábrázolás
csúcsok - kis körök
irányított - nyílak
irányítatlan - vonalak
csúcsok sorszáma - körben

Szöveges ábrázolás
irányítatlan: csúcs vonal csúcsok
irányított: csúcs nyíl csúcsok

Szomszédossági mátrixos/ Csúcsmátrixos reprezentáció
basically mátrix a csúcsokkal
irányított = csak a sorban jelöljük
irányítatlan = sorban és oszlopban is jelöljük

Szomszédossági listás reprezentáció
A/1: Edge*[n] pointer tömbbel ábrázoljuk
irányítatlan = S1L tömb
irányítatlan = A[i] -> v = csúcs majd A[i+1] -> next -> v = csúcs amíg A[i+j] -> next ->..-> next = üres

Ábrázolások tárigénye
n = csúcsok száma
m = élek száma
ritka gráf m eleme Ordo(n)
sűrű grág m eleme Ordo(n^2)
szomszédossági mátrixos ábrázolás Omega(n^2)
szomszédossági listás ábrázolás Omega(n+m)

//Absztrakt halmaz/sorozat/gráf
T - tetszőleges típus
T{} - véges halamz
T<> - véges sorozat

{} - üreshalmaz
u from S kivesz - kivesz egy random elemet S nem üres halamzból

<> - üres sorozat
u,v:T<> - u+v kifejezés konkatenáltja

V = Vertex (absztrakt típus) - gráfok csúcsai
name(v) := x 	<- a v name címkéjének értéke x lesz

E = élek
G = élsúlyozatlan absztrakt gráfok


//Szélességi keresés (BFS = Breadth-first Search)
s - start csúcs
kiválasztunk egy utat, ami a lehető legkevesebb élet tartalmazza
d - hány él hosszú az út
PI - ki a cél csúcs szülője
d(u) = végtelen és PI(u) = nem léteik 	<- ha s-ből nem vezet út u-ba

color címke
- fehér csúcsoknál még nem járt
- szürke csúcsakt már megtalálta de nem dolgozta fel
- fekete csúcsokat megtalálta és feldolgozta

gráf k-adik szintjén <-	s-től k távolságra lévő csúcsok

minden szintet teljesen feldolgoz, mielőtt a következőre lépne közben megkeresi a következő	<- szélességi bejárás/keresés

n = csúcsok db
m = élek db
MT(n,m) eleme Omega(n+m)
mT(n,m) eleme Omega(n)

Szélességi fa = legrövidebb utak fája
az s-ből elérhető csúcsokra azok PI címkéjével lehet hivatkozni


//Mélységi keresés (DFS = Deapth-first Search)
color címke ugyanaz

Mélységi feszítő erdő
minden DFvisit egy-egy mélységi fát számol ki

r csúcs a fa gyökere	<- PI(r) = nem létezik
(u,v) a mélységi fa éle	<- u = PI(v)

(u,v) fa él = (u,v) valamelyik mélységi fa éle
=> a v csúcs még fehér
(u,v) vissza-él = v az u őse
=> a v csúcs szürke
(u,v) előre-él = nem fa él, de u a v őse
=> a v csúcs fekete és d(u) < d(v)
(u,v) kereszt-él = u és v ugyanannak a mélységi fának két különböző ágán vannak VAGY két különböző mélységi fában találhatók
=> a v csúcs fekete és d(u) > d(v)

d/f = elérési/befejezési út
fa élek = dupla szárú nyíl
V = Visszaél
E = Előreél
K = Keresztél

n = csúcsok db
m = élek db
MT(n,m) és mT(n,m) eleme Omega(n+m)

Topologikus rendezés
irányított gráfnál a csúcsok sorba rendezése ahol minden él egy-egy később jövő csúcsba mutat

1) létrehozunk egy üres vermet
2) mélységi bejárás, a befejezett csúcs a verem tetejére kerül
3) kiolvassuk a veremből a topologikus rendezést


//Élsúlyozott gráfok és ábrázolásaik
minden élhez hozzá rendeljük annak w súlyát
az út hossza itt az út költsége (nem az élek száma)

Ábrázolás:
irányítatlannál
	a - b, 2; c, 3
	b - c, 0; d, -1
irányítottnál
	a -> b, 2
	b -> c, 0; d, -1
	c -> a, 1

szomszédossági mátrixnál ahol nincs él ott végtelen van
éllistás ábrázolásnál A[1] -> v = b; A[1] -> w = 2; A[1] -> next = üres

Minimális feszítőfák
G = (V,E) irányítatlan összefüggő gráf feszítőfája a T = (V,F) gráf, ha F részhalmaza E és T fa

Kruskal algoritmus
a gráf éleit súlyuk szerint monoton növekvően veszi sorba, eldobja az éleket, amik kört képeznek
1) A = {}
2) vesszük monoton növ sorrendben az éleket
3) hozzávesszük A-hoz az élet, ha a (V,A)ban összeköt két fát
műveletigénye: O(m ∗ log n) + Θ(n + m)

Prim algoritmusa
1) A = {{r},{}}
2) kiválasztunk egy csúcsot
3) hozzáadjuk a biztonságos élt és a hozzá tartozó csúcsot
műveletigénye: O(m ∗ log n)


//Legrövidebb utak egy forrásból
tetszőleges rögzítet s start csúcsból optimális utat keresünk minden s-ből elérhető csúcsba

Dijkstra algoritmus
működik, ha a gráf egyik élének súlya sem negatív
műveletigénye: O((n + m) ∗ lg n)

DAG legrövidebb utak egy forrásból
működik, ha a gráfban nincs negatív kör
topologikus sorrend first step
műveletigénye: Θ(n + m)

Sor-alapú/Bellman Ford
megmondja ha van benne negatív kör
műveletigénye: O(n ∗ m)


//Mintaillesztés
keressük az érvényes eltolások halmazát
T[1..n] = a teljes szöveg
P[1..m] = a keresett szöveg (1 <= m <= n)
S = a halmaz ahova a sorszámok kerülnek ahol megtaláltuk a keresett szöveget

Egyszerű mintaillesztés/Brute-force
alulvonás ha illeszkedik
áthuzás ha nem illeszkedik, a többi marad ahogy van
műveletigénye: Θ((n − m + 1)∗ m)

Quicksearch
előkészítő fázis: az abc σ elemeihez shift(σ) címkéket társít
műveletigénye: Θ((n − m + 2)∗ m)

Knuth-Morris-Pratt algoritmus
az algoritmus sorra észre veszi hova illeszkedik az előző próbálkozások alapján