print()
show()
NN, ZZ, QQ, RR, CC	<- szám típus

egész rész = //
maradék = %
lusta osztás = /
pontos osztás = /x.	<-x az osztó, KELL A PONT

komplex számnál I (nagy i)

faktoriális = factorial(x)	# x!
binominális = binominal(n, k)	# n!/(n-k)!*k!
megközelítés = n(_, bit/digits) = numerical_approx(_, bit/digits)
felszabadítás = reset('_')
kiszámol = solve(fg, x)
!deklarálni kell hozzá a nem x változókat = var('_') = var('_,_,_')
integrálás = integrate(fg, x)
deriválás = derivate(fg, x)

határérték/limesz = limit()

prímes commandok: is_prime(), next_prime(), nth_prime(), prime_pi()(<- hány db prím van addig), prime_range()(a prímek az adott számig)

felbontás = factor()
egyesítés = expand()

típus lekérdezés = type()

!a listák visszafele is indexelhetők
range(0..n) = 0..n-1
van for ciklus DE : utána NEM {}
lista.index = első előfordulás a listában
egyéb lista commandok: sum(lista), len(lista), lista.append()

Set = halmaz
metszet = X.intersection(Y)

vannak szótárak

_ = legutolsónak kiszámolt eredmény

van vector és matrixmetszet

függvény definiálás = def negyzet(n):
def(asd = true):	<- nem kötelező beírni paraméterti

matrix(n,n) <- matrix
M[i,j]

gráf létrehozása:
I pl:
d = {1: [0,1,2,5], 5: [2,3], 2: [3,0]}
G = Graph(d)
II pl:
V = [1, 2, 3, 4]
E = [(1,1), (1,2), (1,3), (2,1), (2,2), (2,3), (3,1), (3,2), (3,4), (4,3), (4,4)]
G = Graph([V, E] ,multiedges = True, loops = True)
gráf lerajzolás = G.show()

függvény kirajzolás = plot(fg)
kör kirajzolás = circle(kozeppont, sugar)
pont kirajzolás = points(pontok koordinátájának listája, szín, size)
sor kirajzolás = line(koordináták, szín)
alakzat kirajzolás = plygon(csúcskoordináták, szín)	<- számít a sorrend
! + összeköti a kirajzolandó dolgokat

gcd = lnko
